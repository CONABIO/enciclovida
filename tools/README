### README para poner nuevas bases y que se vean en web,
### Todas las pruebas y borrado de bases se realizara desde:
### Servidor de pruebas SQL Server 2012 172.16.1.98
### Servidor web de pruebas colibri

1.- Poner en solo lectura la aplicacion, para que nuevos cambios no tengan lugar mientras se corren los scripts (PENDIENTE).

2.- Crear los nuevos nombres para las bases de datos en SQL server (SQL2012), mandando mesa de ayuda.
        2.1.- Crea esos mismos nombres en una instancia de pruebas de SQL server.

3.- Migrar todas las bases con Microsoft SQL Server Migration Assistant for Access 6.0,
    dejar las ligas al archivo de Access.

4.- En /config/config.yml cambiar la variable "bases" por la lista de bases que se desea actualizar.
        4.1.- Cerciorate que en config/database.yml consulte la instancia de pruebas del servidor.

5.- Corre el script para completar los campos adicionales en las tablas: (0.616043465 seg):
        5.1.- rails r tools/atributos_adicionales.rb -d create                     #para crear los campos adicionales en todas las bases
        5.2.- rails r tools/atributos_adicionales.rb -d drop                       #para borrar los campos adicionales en todas las bases
        5.3.- rails r tools/atributos_adicionales.rb -d create 03-Hongos-Sept14    #para crear los campos adicionales en un conjunto de bases
        5.4.- rails r tools/atributos_adicionales.rb -d drop 03-Hongos-Sept14      #para borrar los campos adicionales en un conjunto de bases


*****NOTA: 6,7,8 se pueden correr en paralelo*****
6.- Corre el script para completar el campo ancestry_ascendente_directo de la tabla Nombre: (5429.73830033 seg)
        6.1.- rails r tools/ancestry_ascendente_directo_sql.rb -d                  #para completarlo en todas las bases
        6.2.- rails r tools/ancestry_ascendente_directo_sql.rb -d 02-Arthropoda    #para correr solo un conjunto de bases

7.- Corre el script para completar el campo ancestry_ascendente_obligatorio de la tabla Nombre: (3595.652265486 seg)
        7.1.- rails r tools/ancestry_ascendente_obligatorio_sql.rb -d                  #para completarlo en todas las bases
        7.2.- rails r tools/ancestry_ascendente_obligatorio_sql.rb -d 02-Arthropoda    #para correr solo un conjunto de bases

8.- Corre el script para completar el campo ancestry de la tabla Region: (289.575500578 seg)
        8.1.- rails r tools/ancestry_regiones_sql.rb -d
        8.2.- rails r tools/ancestry_regiones_sql.rb -d 02-Arthropoda              #para correr solo un conjunto de bases

9.- Corre el script para completar el nombre cientifico de la tabla Nombre: (2721.764556946 seg)
        9.1.- rails r tools/nombre_cientifico_sql.rb -d
        9.2.- rails r tools/nombre_cientifico_sql.rb -d 02-Arthropoda              #para correr solo un conjunto de bases

10.- OJO: Solo si estas migrando la informaciona a un nuevo servidor de SQL Server:
        10.1.- Genera las 3 bases, buscador, buscador_development, buscador_test
        10.2.- Genera la funcion escalar, fnSplitString
        10.3.- Genera la funcion escalar, GetCurrentIP
        10.4.- Genera las tablas necesarias para el funcionamiento en web, rake db:migrate

11.- Genera las vistas y la tabla que sera un volcado de las vistas (45.995830531 seg):
        11.1.- rails r tools/vistas.rb -d                                          #por default crea las vistas
        11.2.- rails r tools/vistas.rb -d drop                                     #para borrar las vistas

12.- Borra los reinos vacios y re-asocia los taxones en solo 5 reinos (31.785429578 seg):
        12.1.- rails r tools/quita_reinos_repetidos.rb -d


*****Hasta aqui la base ya se puede ver para pruebas*****


13.- Corre el script para completar el nombre comun principal de la tabla Nombre (19516.001434746 seg):
        13.1.- rails r tools/nombre_comun_principal.rb -d
        13.2.- rails r tools/nombre_comun_principal.rb -d 02-Arthropoda            #para correr solo un conjunto de bases


14.- Llena los campos icono y nombre_icono para todas las adicionales (2351.556696826 seg):
        14.1.- rails r tools/grupos_iconicos.rb -d


*****Servicios extra*****
*****NOTA: 16,17,18 se pueden correr en paralelo*****
15.- Completa la base de nombres cientificos en redis (6169.426945545 seg):
        15.1.- Borra el archivo dump.rdb
        15.2.- Alzar el servicio de redis: redis-server
        15.3.- rails r tools/nombres_cientificos_redis.rb -d

16.- Completa la base de nombres comunes en redis (7787.854763815 seg):
        16.1.- rails r tools/nombres_comunes_redis.rb -d

17.- Completa los nombres comunes principales con los de NaturaLista, si es que no existe en catalogos
        17.1.- rails r tools/nombres_principales_redis.rb -d

18.- Para generar los registros para el fuzzy match (5084.139111456 seg):
        18.1.- Alzar el servicio del fuzzy match, en una consola de rails
            18.1.1.- require 'blurrily/server.rb'
            18.1.2.- server=Blurrily::Server.new(:host => CONFIG.ip, :directory=> './db/blurrily')
            18.1.3.- server.start
            18.1.4.- rails r tools/exporta_blurrily.rb


*****Migraciones de solo una vez, despues toma los cambios por semana y los guarda en cache*****
*****Fotos*****
19.- Corre el script para guardar la informacion de NaturaLista como la taxonomia y las observaciones (es el script mas tardado):
        19.1.- rails r tools/informacion_naturalista.rb -d

20.- Para guardar las fotos que coincidieron de NaturaLista (975.465496369 seg):
        20.1.- rails r tools/fotos_naturalista.rb -d                               #Llena photos y taxon_photos respectivamente
        20.2.- rails r tools/fotos_naturalista.rb -d truncate                      #Hace un TRUCATE a  photos y taxon_photos (OJO en real)

21.- Para guardar las fotos que coincidieron del Banco de Imagenes (1512.563492617 seg):
        21.1.- rails r tools/fotos_bi.rb -d                                        #Llena photos y taxon_photos respectivamente
        21.2.- rails r tools/fotos_bi.rb -d truncate                               #Hace un TRUCATE a  metadatos y metadato_especies (OJO en real)

22.- Para guardar la foto principal en la tabla Nombre (3720.650933859 seg):
        22.1.- rails r tools/foto_principal.rb -d


*****KML y KMZ*****
23.- Para generar los taxones asociados con el snib (13580.090638988 seg):
        23.1.- rails r tools/correspondencia_snib.rb -d carpeta                    #para recibir la capeta de archivos .csv

24.- Para generar la correspondencia de los kmz del geoserver:
        24.1.- rails r tools/correspondencia_geoserver.rb -d carpeta               #para recibir la capeta de archivos .csv

25.- Para generar los kmz del snib (13652.1079729 seg):
        25.1.- rails r tools/crea_kmz_snib.rb -d

26.- Para generar los kmz de naturalista (708.426385906 seg):
        26.1.- rails r tools/crea_kmz_snib.rb -d


*****Parte de Administracion*****
27.- Genera los triggers que mandaran a llamar al webservice para completar los campos que vengan de
    cualquier parte excepto de web, y que actualiza el volcado igual que la vista:
        27.1.- rails r tools/triggers.rb -d create                                 #para crear los triggers en todas las bases
        27.2.- rails r tools/triggers.rb -d drop                                   #para borrar los triggers en todas las bases
        27.1.- rails r tools/triggers.rb -d create 03-Hongos-Sept14                #para correr solo un conjunto de bases
        27.2.- rails r tools/triggers.rb -d drop 03-Hongos-Sept14                  #para correr solo un conjunto de bases


*****Scripts extra*****
28.- Opcionalmente se pueden sacar los nombres comunes que los catalogos no tienen:
        28.1.- rails r tools/datos_para_catalogos.rb -d

