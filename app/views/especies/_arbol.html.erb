<style>

    .node circle {
        cursor: pointer;
        fill: #ccc;
        stroke: #000;
        stroke-width: 1.5px;
    }

    .node text {
        font: 12px sans-serif;
        pointer-events: none;
        text-anchor: middle;
    }

    line.link {
        stroke: #000;
        stroke-width: 1.5px;
    }

</style>

<script src="http://d3js.org/d3.v3.min.js"></script>
<script>

  var leaft = false;
    var min_zoom = 0.1;
    var max_zoom = 7;
    var zoom = d3.behavior.zoom().scaleExtent([min_zoom,max_zoom]);

    var width = 900,
            height = 500,
            root;

    var force = d3.layout.force()
            .linkDistance(150)
            .charge(-1000)
            .gravity(.1)
            .size([width, height])
            .on("tick", tick);

    var svg = d3.select(".main").append("svg")
            .attr("width", width)
            .attr("height", height)
            .style("cursor","move");

    var g = svg.append("g");
    var link = g.selectAll(".link");
    var node = g.selectAll(".node");

    d3.json("/especies/<%= @especie.id %>/json_d3", function(error, json) {
        if (error) throw error;

        root = json;
        update();
    });

    zoom.on("zoom", function() {
        g.attr("transform", "translate(" + d3.event.translate + ")scale(" + d3.event.scale + ")");
    });

    svg.call(zoom);

    resize();

    function update() {
        var nodes = flatten(root),
                links = d3.layout.tree().links(nodes);

        // Restart the force layout.
        force
                .nodes(nodes)
                .links(links)
                .start();

        // Update links.
        link = link.data(links, function(d) { return d.target.id; });

        link.exit().remove();

        link.enter().insert("line", ".node")
                .attr("class", "link");

        // Update nodes.
        node = node.data(nodes, function(d) { return d.id; });

        node.exit().remove();

        var nodeEnter = node.enter().append("g")
                .attr("class", "node")
                .on("click", click)
                .call(force.drag().on("dragstart", dragstart));

        nodeEnter.append("circle")
                .attr("r", 10);

        nodeEnter.append("text")
                .attr("dy", ".35em")
                .attr("x", function(d) { // una regla de 3 para calcular donde se ubica el texto
                    var text = d.nombre_categoria_taxonomica + " " +d.name;
                    var text_length = text.length;
                    return (60*text_length)/14;
                })
                .text(function(d) { return d.nombre_categoria_taxonomica + " " +d.name; });

        node.select("circle")
                .style("fill", color);
    }

    function tick() {
        node.attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; });

        link.attr("x1", function(d) { return d.source.x; })
                .attr("y1", function(d) { return d.source.y; })
                .attr("x2", function(d) { return d.target.x; })
                .attr("y2", function(d) { return d.target.y; });
    }

    function color(d) {
        return d._children ? "#3182bd" // collapsed package
                : d.children ? "#c6dbef" // expanded package
                : "#fd8d3c"; // leaf node
    }

    // Toggle children on click.
    function click(d) {
        if (d3.event.defaultPrevented) return; // ignore drag

        if (d.children)
        {
            d.children = null;
            leaft = false;
            update();
        } else {

            $.ajax({
                type: 'GET',
                url: "/especies/" + d.especie_id + "/nodo_json_d3",
                dataType: "json"
            }).done(function(data) {
                    if (data.length > 0)
                    {
                        leaft = true;
                        d.children = data;
                        update();
                    }
            });
        }
    }

    // Returns a list of all nodes under the root.
    function flatten(root) {
        var nodes = [], i = 0;

        function recurse(node) {
            if (node.children) node.children.forEach(recurse);

            if (leaft) node.id = ++i;
            else
                if (!node.id) node.id = ++i;

            nodes.push(node);
        }

        recurse(root);
        return nodes;
    }

    function resize() {
        var w = 900, h = 500;
        svg.attr("width", w).attr("height", h);

        force.size([force.size()[0]+(w-width)/zoom.scale(),force.size()[1]+(h-height)/zoom.scale()]).resume();
        width = w;
        height = h;
    }

    function dragstart(d) {
        d3.event.sourceEvent.stopPropagation();
        d3.select(this).classed("fixed", d.fixed = true);
    }

</script>
