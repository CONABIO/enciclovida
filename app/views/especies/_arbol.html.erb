<style>

    .node circle {
        cursor: pointer;
        fill: #ccc;
        stroke: #000;
        stroke-width: 1.5px;
    }

    .node text {
        font: 12px sans-serif;
        text-anchor: middle;
        text-baseline:middle;
    }

    line.link {
        stroke: #000;
        stroke-width: 1.5px;
    }

    .node a  {
        color: pink;
        font: 12px sans-serif;
        fill: navy;
    }

    .node text a:hover, text a:active {
        text-decoration: underline;
        fill:darkred;
    }

    .svg-container {
        width: 100%;
        /*padding-top: 400px; /* aspect ratio */
        height: 700px;
    }
    .svg-content-responsive {
        top: 10px;
        left: 0;
    }

</style>

<script src="http://d3js.org/d3.v3.min.js"></script>
<script>

  var leaft = false;
    var min_zoom = 0.1;
    var max_zoom = 7;
    var zoom = d3.behavior.zoom().scaleExtent([min_zoom,max_zoom]);

    var width = 900,
            height = 500,
            root;

    var force = d3.layout.force()
            .linkDistance(150)
            .charge(-1000)
            .gravity(.1)
            .size([width, height])
            .on("tick", tick);

    var svg = d3.select(".main").append("svg")
            .style("cursor","move")
            .style("border", "2px solid black")
            // Para la responsividad
            .classed("svg-container", true)
            .attr("preserveAspectRatio", "xMinYMin meet")
            .attr("viewBox", "0 -50 1200 100")
            .classed("svg-content-responsive", true);

    var g = svg.append("g");
    var link = g.selectAll(".link");
    var node = g.selectAll(".node");

    d3.json("/especies/<%= @especie.id %>/json_d3", function(error, json) {
        if (error) throw error;

        root = json;
        update();
    });

    zoom.on("zoom", function() {
        g.attr("transform", "translate(" + d3.event.translate + ")scale(" + d3.event.scale + ")");
    });

    svg.call(zoom);

    function update() {
        var nodes = flatten(root),
                links = d3.layout.tree().links(nodes);

        // Restart the force layout.
        force
                .nodes(nodes)
                .links(links)
                .start();

        // Update links.
        link = link.data(links, function(d) { return d.target.id; });

        link.exit().remove();

        link.enter().insert("line", ".node")
                .attr("class", "link");

        // Update nodes.
        node = node.data(nodes, function(d) { return d.id; });

        node.exit().remove();

        var nodeEnter = node.enter().append("g")
                .attr("class", "node")
                .call(force.drag().on("dragstart", dragstart));

        nodeEnter.append("circle")
                .attr("r", function(d) {return scaleNode(d);});

        var taxon_link = nodeEnter.append("text")
                .attr("dy", ".35em")
                .attr("x", function(d) { // una regla de 3 para calcular donde se ubica el texto
                    var text = d.nombre_categoria_taxonomica + " " +d.name;

                    // Calcula los pixeles de la cadena para una mejor aproximacion
                    var canvas = document.createElement('canvas');
                    var ctx = canvas.getContext("2d");
                    ctx.font = "12px sans-serif";
                    var text_length = ctx.measureText(text).width;

                    return (60*text_length)/100;
                });

        taxon_link.append("a")
                .attr("xlink:href", function(d) {return "/especies/" + d.especie_id} )
                .text(function(d) { return d.nombre_categoria_taxonomica + " " + d.name;})
                .attr("target", "_blank");

        var conteo_link = nodeEnter.append("text")
                .attr("y", -20)
                .attr("dy", ".35em");

        conteo_link.append("a")
                .attr("xlink:href", function(d){return d.especies_inferiores_url;})
                .text(function(d) { return d.especies_inferiores_conteo == 0 ? '' : d.especies_inferiores_conteo; })
                .attr("target", "_blank");

        node.select("circle")
                .style("fill", color)
                .on("click", click);
    }

    function tick() {
        node.attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; });

        link.attr("x1", function(d) { return d.source.x; })
                .attr("y1", function(d) { return d.source.y; })
                .attr("x2", function(d) { return d.target.x; })
                .attr("y2", function(d) { return d.target.y; });
    }

    function color(d) {
        return d._children ? "#3182bd" // collapsed package
                : d.children ? "#c6dbef" // expanded package
                : "#fd8d3c"; // leaf node
    }

    // Toggle children on click.
    function click(d) {
        if (d3.event.defaultPrevented) return; // ignore drag

        if (d.children)
        {
            d.children = null;
            leaft = false;
            update();
        } else {

            $.ajax({
                type: 'GET',
                url: "/especies/" + d.especie_id + "/nodo_json_d3",
                dataType: "json"
            }).done(function(data) {
                    if (data.length > 0)
                    {
                        leaft = true;
                        d.children = data;
                        update();
                    }
            });
        }
    }

    // Returns a list of all nodes under the root.
    function flatten(root) {
        var nodes = [], i = 0;

        function recurse(node) {
            if (node.children) node.children.forEach(recurse);

            if (leaft) node.id = ++i;
            else
                if (!node.id) node.id = ++i;

            nodes.push(node);
        }

        recurse(root);
        return nodes;
    }

    function resize() {
        console.log($('#clasificacion_d3').width());
        var w = $('#clasificacion_d3').width(), h = window.innerHeight;
        svg.attr("width", w).attr("height", h);

        force.size([force.size()[0]+(w-width)/zoom.scale(),force.size()[1]+(h-height)/zoom.scale()]).resume();
        width = w;
        height = h;
    }

    function dragstart(d) {
        d3.event.sourceEvent.stopPropagation();
        d3.select(this).classed("fixed", d.fixed = true);
    }

    function scaleNode(d) {
        var radius_size = 5;

        if (d.especies_inferiores_conteo > 0)
        {
            /*if (d.especies_inferiores_conteo >= 10000 && d.especies_inferiores_conteo <= 19999) radius_size = d.especies_inferiores_conteo/10000;
            if (d.especies_inferiores_conteo >= 20000 && d.especies_inferiores_conteo <= 29999) radius_size = d.especies_inferiores_conteo/20000;
            if (d.especies_inferiores_conteo >= 30000 && d.especies_inferiores_conteo <= 39999) radius_size = d.especies_inferiores_conteo/30000;
            if (d.especies_inferiores_conteo >= 40000 && d.especies_inferiores_conteo <= 49999) radius_size = d.especies_inferiores_conteo/40000;
            if (d.especies_inferiores_conteo >= 50000 && d.especies_inferiores_conteo <= 59999) radius_size = d.especies_inferiores_conteo/10000;*/

            if (d.especies_inferiores_conteo >= 10000) radius_size = d.especies_inferiores_conteo/10000;
            if (d.especies_inferiores_conteo >= 1000 && d.especies_inferiores_conteo <= 9999) radius_size = d.especies_inferiores_conteo/1000;
            if (d.especies_inferiores_conteo >= 100 && d.especies_inferiores_conteo <= 999) radius_size = d.especies_inferiores_conteo/100;
            if (d.especies_inferiores_conteo <= 100 && d.especies_inferiores_conteo >= 10) radius_size = 10;
        }
        return radius_size;
    }
</script>
