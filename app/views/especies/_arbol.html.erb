<style>

    body {
        overflow:hidden;
        margin:0;
    }

    .node circle {
        cursor: pointer;
        fill: #ccc;
        stroke: #000;
        stroke-width: 1.5px;
    }

    .node text {
        font: 10px sans-serif;
        pointer-events: none;
        text-anchor: middle;
    }

    line.link {
        stroke: #000;
        stroke-width: 1.5px;
        fill: green;
        stroke-dasharray: 0,2 1;
    }

</style>

<script src="http://d3js.org/d3.v3.min.js"></script>
<script>

    var width = window.innerWidth,
            height = window.innerHeight,
            root;

    var force = d3.layout.force()
            .linkDistance(80)
            .charge(-120)
            .gravity(.05)
            .size([width, height])
            .on("tick", tick);

    var svg = d3.select(".main").append("svg")
            .attr("width", width)
            .attr("height", height);

    var min_zoom = 0.1;
    var max_zoom = 7;
    var zoom = d3.behavior.zoom().scaleExtent([min_zoom,max_zoom]);

    svg.style("cursor","move");

    var link = svg.selectAll(".link"),
            node = svg.selectAll(".node");

    d3.json("/especies/<%= @especie.id %>/json_d3", function(error, json) {
        if (error) throw error;

        root = json;
        update();
    });

    function update() {
        console.log(root);
        var nodes = flatten(root),
                links = d3.layout.tree().links(nodes);

        console.log(nodes);
        // Restart the force layout.
        force
                .nodes(nodes)
                .links(links)
                .start();

        // Update links.
        link = link.data(links, function(d) { return d.target.id; });

        link.exit().remove();

        link.enter().insert("line", ".node")
                .attr("class", "link");

        // Update nodes.
        node = node.data(nodes, function(d) { return d.id; });

        node.exit().remove();

        var nodeEnter = node.enter().append("g")
                .attr("class", "node")
                .on("click", click)
                .call(force.drag);

        nodeEnter.on("dblclick.zoom", function(d) { d3.event.stopPropagation();
            var dcx = (window.innerWidth/2-d.x*zoom.scale());
            var dcy = (window.innerHeight/2-d.y*zoom.scale());
            zoom.translate([dcx,dcy]);
            node.attr("transform", "translate("+ dcx + "," + dcy  + ")scale(" + zoom.scale() + ")");


        });

        nodeEnter.append("circle")
                .attr("r", 10);

        nodeEnter.append("text")
                .attr("dy", ".35em")
                .text(function(d) { return d.name; });

        node.select("circle")
                .style("fill", color);
    }

    function tick() {
        link.attr("x1", function(d) { return d.source.x; })
                .attr("y1", function(d) { return d.source.y; })
                .attr("x2", function(d) { return d.target.x; })
                .attr("y2", function(d) { return d.target.y; });

        node.attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; });
    }

    function color(d) {
        return d._children ? "#3182bd" // collapsed package
                : d.children ? "#c6dbef" // expanded package
                : "#fd8d3c"; // leaf node
    }

    // Toggle children on click.
    function click(d) {
        if (d3.event.defaultPrevented) return; // ignore drag
        if (d.children) {
            d._children = d.children;
            d.children = null;
        } else {
            d.children = d._children;
            d._children = null;
        }
        update();
    }

    // Returns a list of all nodes under the root.
    function flatten(root) {
        var nodes = [], i = 0;

        function recurse(node) {
            //node.id = ++i;
            if (node.children)
            {
                node.children.forEach(recurse);
              //  console.log(node)
            }
            //if (node.name == "flare") {
                if (!node.id) node.id = ++i;
                nodes.push(node);

            //}
        }

        recurse(root);
        return nodes;
    }

</script>
