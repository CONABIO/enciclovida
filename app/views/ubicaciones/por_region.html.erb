<% content_for(:extrajs) do %>

    <%= javascript_include_tag 'geodatos/d3.v3.min', 'data-turbolinks-track' => true %>
    <script src="http://d3js.org/topojson.v1.min.js"></script>
    <!--script src='http://cdn.leafletjs.com/leaflet/v0.7.7/leaflet.js' data-turbolinks-track='true'></script-->
    <script src="https://unpkg.com/leaflet@1.2.0/dist/leaflet.js"></script>

    <script src="https://unpkg.com/leaflet.markercluster@1.2.0/dist/leaflet.markercluster.js"></script>
    <%#= javascript_include_tag 'geodatos/leaflet.markercluster-src.js', 'data-turbolinks-track' => true %>
    <%= javascript_include_tag 'geodatos/Control.FullScreen.js', 'data-turbolinks-track' => true %>
    <%= javascript_include_tag 'busquedas_espaciales/topojson', 'data-turbolinks-track' => true %>

    <script data-turbolinks-track="true">

        var cargaMapa = function (id)
        {
            var place = [23.79162789, -102.04376221];
            var tile_url = 'http://{s}.tile.osm.org/{z}/{x}/{y}.png';

            map = L.map(id, {
                zoomControl: false
            });

            var zoom = L.control.zoom({
                zoomInTitle: 'Acercarse',
                zoomOutTitle: 'Alejarse'
            });

            // https://github.com/brunob/leaflet.fullscreen
            var fullscreen = L.control.fullscreen({
                position: 'topleft',
                title: 'Pantalla completa',
                titleCancel: 'Salir de pantalla completa'
            });

            map.addControl(zoom);
            map.addControl(fullscreen);

            var layer = L.tileLayer(tile_url, {
                attribution: 'OSM',
                noWrap: true,
            });

            map.addLayer(layer);
            map.setView(place, 5);  // Default place and zoom
        };

        var cargaRegistros = function(url)
        {
            geojsonFeature = [];
            allowedPoints = d3.map([]);
            geoportal_count = 0;

            species_layer = null;
            markersLayer = null;
            legend_control = L.control.layers({}, {}, {collapsed: false, position: 'bottomleft'}).addTo(map);

            geojsonMarkerGeoportalOptions = {
                radius: 5,
                fillColor: "#ff0000",
                color: "white",
                weight: 2,
                opacity: 1,
                fillOpacity: 0.6
            };

            geojsonMarkerGeoportalAveravesOptions = {
                radius: 5,
                fillColor: "#FFA500",
                color: "black",
                weight: 2,
                opacity: 1,
                fillOpacity: 0.6
            };

            geojson_geoportal(url);
        };

        function addPointLayerGeoportal(){
            geojsonFeature =  { "type": "FeatureCollection",
                "features": allowedPoints.values()};

            markersLayer = L.markerClusterGroup({ maxClusterRadius: 30, chunkedLoading: true, which_layer: 'geoportal', chunkInterval: '2000', chunkDelay: 1});

            species_layer = L.geoJson(geojsonFeature, {
                pointToLayer: function (feature, latlng) {
                    // Este campos quiere decir que es de aves aves
                    if (feature.properties.d[1])
                        return L.circleMarker(latlng, geojsonMarkerGeoportalAveravesOptions);
                    //else if (fosil != undefined && fosil != "")
                    //  return L.circleMarker(latlng, geojsonMarkerGeoportalFosilOptions);
                    else  // de lo contrario es un registro rojo normal
                        return L.circleMarker(latlng, geojsonMarkerGeoportalOptions);
                },
                onEachFeature: function (feature, layer) {
                    layer.on("click", function (e) {
                        ejemplar_snib(layer, feature.properties.d[0]);
                    });
                }
            });

            markersLayer.addLayer(species_layer);
            map.addLayer(markersLayer);

            /*
             var punto_rojo = '<svg height="50" width="200"><circle cx="10" cy="10" r="6" stroke="black" stroke-width="1" stroke-opacity="1" fill="#FF0000"/>';
             punto_rojo+= '<text x="20" y="13">Registros del SNIB</text>';

             var punto_naranja = punto_rojo + '<circle cx="10" cy="25" r="6" stroke="black" stroke-width="1" stroke-opacity="1" fill="#FFA500"/>';
             punto_naranja+= '<text x="20" y="28">Registros de AverAves</text>';

             var punto_gris = punto_naranja + '<circle cx="10" cy="40" r="6" stroke="black" stroke-width="1" stroke-opacity="1" fill="#888888"/>';
             punto_gris+= '<text x="20" y="43">Registros de Fósiles</text></svg>';

             legend_control.addOverlay(markersLayer,
             "<b>Registros del SNIB <sub>" + geoportal_count + "</sub><br /> (museos, colectas y proyectos)</b>" +
             "<p>"+punto_naranja+"</p>"
             );*/
        }

        function ejemplar_snib(layer, id){
            $.ajax({
                url: "/especies/" + TAXON.id + "/ejemplar-snib/" + id,
                dataType : "json",
                success : function (res){
                    if (res.estatus == 'OK')
                    {
                        var ejemplar = res.ejemplar;
                        var contenido = "";

                        contenido += "<h4>" + name() + "</h4>";
                        contenido += "<dt>Localidad: </dt><dd>" + ejemplar.localidad + "</dd>";
                        contenido += "<dt>Municipio: </dt><dd>" + ejemplar.municipiomapa + "</dd>";
                        contenido += "<dt>Estado: </dt><dd>" + ejemplar.estadomapa + "</dd>";
                        contenido += "<dt>País: </dt><dd>" + ejemplar.paismapa + "</dd>";
                        contenido += "<dt>Fecha: </dt><dd>" + ejemplar.fechacolecta + "</dd>";
                        contenido += "<dt>Colector: </dt><dd>" + ejemplar.colector + "</dd>";
                        contenido += "<dt>Colección: </dt><dd>" + ejemplar.coleccion + "</dd>";
                        contenido += "<dt>Institución: </dt><dd>" + ejemplar.institucion + "</dd>";
                        contenido += "<dt>País de la colección: </dt><dd>" + ejemplar.paiscoleccion + "</dd>";

                        if (ejemplar.proyecto.length > 0 && ejemplar.urlproyecto.length > 0)
                            contenido += "<dt>Proyecto: </dt><dd><a href='" + ejemplar.urlproyecto + "' target='_blank'>" + ejemplar.proyecto + "</a></dd>";

                        contenido += "<dt>Más información: </dt><dd><a href='http://" + ejemplar.urlejemplar + "' target='_blank'>consultar</a></dd>";

                        // Para enviar un comentario acerca de un registro en particular
                        contenido += "<dt>¿Tienes un comentario?: </dt><dd><a href='/especies/" + TAXON.id + "/comentarios/new?proveedor_id=" + ejemplar.idejemplar + "&tipo_proveedor=6' target='_blank'>redactar</a></dd>";

                        contenido = "<dl class='dl-horizontal'>" + contenido + "</dl>" + "<strong>ID: </strong>" + ejemplar.idejemplar;
                    } else {
                        var contenido = "Hubo un error al retraer el ejemplar: " + res.msg;
                    }

                    // Pone el popup arriba del punto
                    var popup = new L.Popup();
                    var bounds = layer.getBounds();

                    popup.setLatLng(bounds.getCenter());
                    popup.setContent(contenido);
                    map.openPopup(popup);
                },
                error: function( jqXHR ,  textStatus,  errorThrown ){
                    console.log("error: " + textStatus);
                    console.log(errorThrown);
                    console.log(jqXHR.responseText);
                }
            });  // termina ajax
        }

        function name()
        {
            if (I18n.locale == 'es')
            {
                if (NOMBRE_COMUN_PRINCIPAL.length > 0)
                    return NOMBRE_COMUN_PRINCIPAL + " <a href='/especies/" + TAXON.id + "'><i>(" + TAXON.nombre_cientifico + ")</i></a>";
                else
                    return "<i>(" + TAXON.nombre_cientifico + ")</i>";
            } else {
                return "<i>(" + TAXON.nombre_cientifico + ")</i>";
            }
        }

        var geojson_geoportal = function(url)
        {
            $.ajax({
                url: url,
                dataType : "json",
                success : function (d){
                    geoportal_count = d.length;
                    allowedPoints = d3.map([]);

                    for(i=0;i<d.length;i++)
                    {
                        var item_id = 'geo-' + i.toString();

                        allowedPoints.set(item_id, {
                            "type"      : "Feature",
                            "properties": {d: d[i]}, // El ID y si es de aver aves
                            "geometry"  : JSON.parse(d[i].json_geom)
                        });
                    }

                    addPointLayerGeoportal();
                },
                error: function( jqXHR ,  textStatus,  errorThrown ){
                    console.log("error: " + textStatus);
                    console.log(errorThrown);
                    console.log(jqXHR.responseText);
                }
            });  // termina ajax
        };

        var dameUrlCargaGrupos = function(prop)
        {
            switch (prop.tipo_region)
            {
                case 'estado':
                    return 'http://www.enciclovida.mx:9002/taxonEdo/conteo/' + CORRESP[prop.region_id] + '/edomun/aves?apiKey=enciclovida';
                case 'municipio':
                    return 'http://www.enciclovida.mx:9002/taxonMuni/listado/' + prop.parent_id + '/' + prop.region_id + '/edomun/aves?apiKey=enciclovida';
                default:
                    return undefined;
            }
        };

        var dameUrlTopojson = function(prop)
        {
            switch (prop.tipo_region)
            {
                case 'estado':
                    return '/topojson/' + prop.tipo_region + '_' + prop.region_id + '.json';
                case 'municipio':
                    return '/topojson/' + prop.tipo_region + '_' + prop.region_id + '_' + prop.parent_id + '.json';
                default:
                    return undefined;
            }
        };

        var cargaGrupos = function(properties)
        {
            // Aqui pregunto con el servio de conteo de Abraham, y recibo una respuesta similar, espero
            var grupos = [{"nombre": "Algas", "conteo": 0, "icono": "protoctista-ev-icon"}, {"nombre": "Anfibios", "conteo": 0, "icono": "amphibia-ev-icon"},
                {"nombre": "Hongos", "conteo": 0, "icono": "fungi-ev-icon"},
                {"nombre": "Insectos", "conteo": 0, "icono": "insecta-ev-icon"}, {"nombre": "Mamíferos", "conteo": 0, "icono": "mammalia-ev-icon"},
                {"nombre": "Musgos", "conteo": 0, "icono": "bryophyta-ev-icon"}, {"nombre": "Peces", "conteo": 0, "icono": "actinopterygii-ev-icon"},
                {"nombre": "Plantas", "conteo": 0, "icono": "plantae-ev-icon"}, {"nombre": "Reptiles", "conteo": 0, "icono": "reptilia-ev-icon"}];

            var url = dameUrlCargaGrupos(properties);
            if (url != undefined)
            {
                $.ajax({
                    url: url
                }).done(function(resp) {
                    especies = resp.slice(0,30).map(a => a.especievalidabusqueda + '-' + a.nregistros);
                    grupos.push({"nombre": "Aves", "conteo": resp.length, "icono": "aves-ev-icon"});

                    $('#contenedor_grupos').empty();
                    $('#contenedor_especies').empty();
                    $.each(grupos, function(index, prop){
                        $('#contenedor_grupos').append('<label><span title="' + prop.nombre + '" class="grupo_id btn btn-xs btn-basica btn-title" grupo_id="'+prop.nombre+'"><i class="' + prop.icono + '"></i></span></label><sub class="badge">' + prop.conteo + '</sub>');
                    });
                }).fail(function() {
                    console.log('Falló el servicio de conteo del SNIB');
                });
            }
        };

        var cargaEspecies = function()
        {
            // Aqui pregunto por la segunda parte del servicio de Abraham, esperando una respuesta similar
            /*var especies = {};
             especies["resultados"] = ["1077REPTI", "12780ANFIB", "12109MAMIF", "938REPTI", "19405GIMNO", "923REPTI",
             "1211REPTI", "491REPTI", "11881MAMIF", "963REPTI", "40198ANGIO", "14269AVES", "571REPTI", "13478AVES", "3659LEPID"];*/

            // Pregunta por los datos correspondientes a estas especies en nuestra base, todos deberian coincidir en teoria ya que son ids de catalogos, a excepcion de los nuevos, ya que aún no se actualiza a la base centralizada
            $.ajax({
                //url: '/especies-por-catalogo-id',
                url: '/especies-por-nombre-cientifico',
                //data: {catalogo_id: especies["resultados"]}
                data: {especies: especies}
            }).done(function(resp) {
                if (resp.estatus)
                {
                    $('#contenedor_especies').empty();
                    $.each(resp.resultados, function(index, taxon){
                        $('#contenedor_especies').append('<div class="result-img-container" snib_url="' + taxon.snib_mapa_json + '">' +
                        '<a href class="especie_id" snib_url="http://200.12.166.190:9000/snib?qtype=getSpecies&rd=animalia&id='+taxon.catalogo_id+'&clayer='+tipo_region_se+'&cvalue='+region_id_se+'"><img src="' + taxon.foto+'"/></a>' +
                        '<div class="result-nombre-container">' +
                        '<h5>' + taxon.nombre_comun + ' <sub class="badge">' + taxon.nregistros + '</sub></h5>' +
                        '<h5><a href class="especie_id"><i>(' + taxon.nombre_cientifico + ')</i></a></h5>' +
                        '</div>' +
                        '</div>');
                    });
                } else
                    console.log('Falló la carga de especies de enciclovida');

            }).fail(function() {
                console.log('Falló la carga de especies de enciclovida');
            });
        };

        // Cargo los municipios en la busqueda por lista
        var municipiosPorEstado = function(estado){
            $.ajax({
                url: '/municipios-por-estado',
                data: {region_id: estado.val()}
            }).done(function(res) {
                if (res.estatus)
                {
                    $('#region_municipio').empty().append('<option value>- - - Escoge un municipio - - -</option>');
                    $.each(res.resultados, function(index, municipio){
                        $('#region_municipio').append('<option value="' + municipio.region_id + '">' + municipio.nombre_region + '</option>');
                    });

                    $('#region_municipio').prop('disabled', false).attr('parent_id', res.parent_id);
                }
            }).fail(function() {
                console.log('Falló al cargar los municipios por estado');
            });
        };

        // Carga la division estatal de un inicio
        var cargaDivisionEstatal = function()
        {
            var svg = d3.select(map.getPanes().overlayPane).append('svg').attr('id', 'svg-division-estatal');
            var g = svg.append('g').attr('class', 'leaflet-zoom-hide');

            d3.json('/topojson/estado.json', function (error, collection) {
                var bounds = d3.geo.bounds(topojson.feature(collection, collection.objects['collection']));
                var path = d3.geo.path().projection(projectPoint);

                var feature = g.selectAll('.region')
                        .data(topojson.feature(collection, collection.objects['collection']).features)
                        .enter()
                        .append('path')
                        .attr('class', 'region leaflet-clickable')
                        .on('mouseover', function(d){
                            var name = d.properties.nombre_region;
                            $('#contenedor-nombre-region').html(name);
                        })
                        .on('click', function(d){
                            tipo_region_se = 'estados';
                            region_id_se = d.properties.region_id;

                            d.properties.tipo_region = 'estado';
                            cargaGrupos(d.properties);

                            $('#svg-division-municipal').remove();
                            $('#svg-division-estatal .selecciona-region').attr('class', 'region');
                            $(this).attr('class', 'selecciona-region');

                            map.flyTo(d.properties.centroide, 7);
                            cargaDivisionMunicipal(d);
                        });

                map.on('zoomend', reset);
                map.on('zoomstart', function(){
                    $('#svg-division-estatal').css('visibility', 'hidden');
                    $('#svg-division-municipal').css('visibility', 'hidden');
                });
                reset();

                // Reposition the SVG to cover the features.
                function reset()
                {
                    var bottomLeft = projectPoint(bounds[0]);
                    var topRight = projectPoint(bounds[1]);

                    svg.attr('width', topRight[0] - bottomLeft[0])
                            .attr('height', bottomLeft[1] - topRight[1])
                            .style('margin-left', bottomLeft[0] + 'px')
                            .style('margin-top', topRight[1] + 'px');

                    var translation = -bottomLeft[0] + ',' + -topRight[1];
                    g.attr('transform', 'translate(' + -bottomLeft[0] + ',' + -topRight[1] + ')');
                    feature.attr('d', path);

                    $('#svg-division-estatal').css('visibility', 'visible');
                    $('#svg-division-municipal').css('visibility', 'visible');
                }

                // Use Leaflet to implement a D3 geographic projection.
                function projectPoint(x) {
                    var point = map.latLngToLayerPoint(new L.LatLng(x[1], x[0]));
                    return [point.x, point.y];
                }
            });
        };

        // Carga todos los municipios de cierto estado
        var cargaDivisionMunicipal = function(d)
        {
            var svg = d3.select(map.getPanes().overlayPane).append('svg').attr('id', 'svg-division-municipal');
            var g = svg.append('g').attr('class', 'leaflet-zoom-hide');

            d3.json('/topojson/estado_' + d.properties.region_id + '_division_municipal.json', function (error, collection) {
                var bounds = d3.geo.bounds(topojson.feature(collection, collection.objects['collection']));
                var path = d3.geo.path().projection(projectPoint);

                var feature = g.selectAll('.region')
                        .data(topojson.feature(collection, collection.objects['collection']).features)
                        .enter()
                        .append('path')
                        .attr('class', 'region leaflet-clickable')
                        .on('mouseover', function(d){
                            var name = d.properties.nombre_region;
                            $('#contenedor-nombre-region').html(name);
                        })
                        .on('click', function(d){
                            d.properties.tipo_region = 'municipio';
                            cargaGrupos(d.properties);

                            $('#svg-division-estatal .selecciona-region').attr('class', 'region');
                            $('#svg-division-municipal .selecciona-region').attr('class', 'region');
                            $(this).attr('class', 'selecciona-region');

                            map.flyTo(d.properties.centroide, 9);
                        });

                map.on('zoomend', reset);
                map.on('zoomstart', function(){
                    $('#svg-division-estatal').css('visibility', 'hidden');
                    $('#svg-division-municipal').css('visibility', 'hidden');
                });

                // Reposition the SVG to cover the features.
                function reset()
                {
                    var bottomLeft = projectPoint(bounds[0]);
                    var topRight = projectPoint(bounds[1]);

                    svg.attr('width', topRight[0] - bottomLeft[0])
                            .attr('height', bottomLeft[1] - topRight[1])
                            .style('margin-left', bottomLeft[0] + 'px')
                            .style('margin-top', topRight[1] + 'px');

                    var translation = -bottomLeft[0] + ',' + -topRight[1];
                    g.attr('transform', 'translate(' + -bottomLeft[0] + ',' + -topRight[1] + ')');
                    feature.attr('d', path);

                    $('#svg-division-estatal').css('visibility', 'visible');
                    $('#svg-division-municipal').css('visibility', 'visible');
                }

                // Use Leaflet to implement a D3 geographic projection.
                function projectPoint(x) {
                    var point = map.latLngToLayerPoint(new L.LatLng(x[1], x[0]));
                    return [point.x, point.y];
                }
            });
        };

        // Carga una sola region en especifico, estado, municipio, anp o ecoregion
        var cargaRegion = function(prop)
        {
            var svg = d3.select(map.getPanes().overlayPane).append('svg').attr('id', 'svg-region');
            var g = svg.append('g').attr('class', 'leaflet-zoom-hide');

            var url = dameUrlTopojson(prop);
            if (url == undefined) return;

            d3.json(url, function (error, collection) {
                var bounds = d3.geo.bounds(topojson.feature(collection, collection.objects['collection']));
                var path = d3.geo.path().projection(projectPoint);

                var feature = g.selectAll('.region')
                        .data(topojson.feature(collection, collection.objects['collection']).features)
                        .enter()
                        .append('path')
                        .attr('class', 'region leaflet-clickable');

                map.on('zoomend', reset);
                map.on('zoomstart', function(){
                    $('#svg-division-estatal').css('visibility', 'hidden');
                    $('#svg-division-municipal').css('visibility', 'hidden');
                });

                // Reposition the SVG to cover the features.
                function reset()
                {
                    var bottomLeft = projectPoint(bounds[0]);
                    var topRight = projectPoint(bounds[1]);

                    svg.attr('width', topRight[0] - bottomLeft[0])
                            .attr('height', bottomLeft[1] - topRight[1])
                            .style('margin-left', bottomLeft[0] + 'px')
                            .style('margin-top', topRight[1] + 'px');

                    var translation = -bottomLeft[0] + ',' + -topRight[1];
                    g.attr('transform', 'translate(' + -bottomLeft[0] + ',' + -topRight[1] + ')');
                    feature.attr('d', path);

                    $('#svg-division-estatal').css('visibility', 'visible');
                    $('#svg-division-municipal').css('visibility', 'visible');
                }

                // Use Leaflet to implement a D3 geographic projection.
                function projectPoint(x) {
                    var point = map.latLngToLayerPoint(new L.LatLng(x[1], x[0]));
                    return [point.x, point.y];
                }
            });
        };
    </script>

<% end %>

<% content_for(:delayedjs) do %>
    <script>
        map = null;
        especies = null;
        region_id_se = null;
        tipo_region_se = null;
        CORRESP = eval(<%=raw Estado::CORRESPONDENCIA.to_json %>);  // Es el id del estado, para posteriormente hallar su correspondencia al ID del API
        cargaMapa('map');

        $('#contenedor_grupos').on('click', '.grupo_id', function(){
            cargaEspecies();
            return false;
        });

        $('#contenedor_especies').on('click', '.especie_id', function(){
            cargaRegistros($(this).attr('snib_url'));
            return false;
        });

        $('#regiones').on('change', '#region_estado', function(){
            if ($(this).val() == '')
            {
                $('#region_municipio').empty().append('<option value>- - - - - - - -</option>').prop('disabled', true);
                $('#region_anp').empty().append('<option value>- - - - - - - -</option>').prop('disabled', true);

            } else {
                municipiosPorEstado($(this));
                //regionesAnp($(this));

                cargaRegion({"tipo_region": "estado", "region_id": $(this).val()});
                map.flyTo(d.properties.centroide, 9);
            }
        });

        $('#regiones').on('change', '#region_municipio', function(){
            if ($(this).val() == '')
                topoLayer.clearLayers();

        });

        cargaDivisionEstatal();

    </script>
<% end %>

<% content_for(:extracss) do %>
    <!--link rel="stylesheet" href="http://cdn.leafletjs.com/leaflet/v0.7.7/leaflet.css" /-->
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.2.0/dist/leaflet.css" />
    <link rel="stylesheet" href="https://unpkg.com/leaflet.markercluster@1.2.0/dist/MarkerCluster.Default.css" />
    <%#= stylesheet_link_tag 'MarkerCluster.Default', 'data-turbolinks-track' => true %>
    <%= stylesheet_link_tag 'geodatos/Control.FullScreen.css', 'data-turbolinks-track' => true %>
    <%= stylesheet_link_tag "busquedas", media: "all", "data-turbolinks-track" => true %>
    <style>
        #map {
            min-height: 800px;
            width: 100%;
        }
        #especies img{
            max-height: 100px;
        }
        #contenedor_especies h5{
            font-size: small;
        }
        .region, .selecciona-region {
            fill: #e5e5e5;
            opacity: .5;
            pointer-events: all!important;
        }
        .region {
            stroke: black;
            stroke-width:1px;
        }
        .region:hover {
            fill: steelblue;
        }
        .selecciona-region {
            stroke: green;
            stroke-width:3px;
        }
        #contenedor-nombre-region {
            /*background-color: grey;*/
            /*color: white;*/
            font-weight: bold        }
    </style>
<% end %>


<div id="contenedor_mapa" class="col-xs-12 col-sm-12 col-md-7 col-lg-8">
  <h4 class="text-left text-success" id="contenedor-nombre-region">Selecciona un estado</h4>
  <div id="map"></div>
</div>
<div id="regiones" class="col-xs-12 col-sm-6 col-md-5 col-lg-4">
  <%= render partial: 'tipos_regiones' %>
</div>
<div id="grupos" class="col-xs-12 col-sm-6 col-md-5 col-lg-4">
  <%= render partial: 'grupos' %>
</div>
<div id="especies" class="col-xs-12 col-sm-12 col-md-5 col-lg-4">
  <%= render partial: 'especies' %>
</div>
