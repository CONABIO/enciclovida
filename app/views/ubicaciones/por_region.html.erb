<% content_for(:extrajs) do %>
    <script src="//cdnjs.cloudflare.com/ajax/libs/chroma-js/0.5.9/chroma.min.js"></script>
    <%= javascript_include_tag 'geodatos/d3.v3.min', 'data-turbolinks-track' => true %>
    <script src="http://d3js.org/topojson.v1.min.js"></script>
    <!--script src='http://cdn.leafletjs.com/leaflet/v0.7.7/leaflet.js' data-turbolinks-track='true'></script-->
    <script src="https://unpkg.com/leaflet@1.2.0/dist/leaflet.js"></script>
    <script src="http://leaflet.github.io/Leaflet.label/leaflet.label.js"></script>
    <%= javascript_include_tag 'geodatos/Control.FullScreen.js', 'data-turbolinks-track' => true %>
    <%= javascript_include_tag 'busquedas_espaciales/topojson', 'data-turbolinks-track' => true %>

    <script data-turbolinks-track="true">

        var cargaMapa = function (id)
        {
            var place = [23.79162789, -102.04376221];
            var tile_url = 'http://{s}.tile.osm.org/{z}/{x}/{y}.png';

            map = L.map(id, {
                zoomControl: false
            });

            var zoom = L.control.zoom({
                zoomInTitle: 'Acercarse',
                zoomOutTitle: 'Alejarse'
            });

            // https://github.com/brunob/leaflet.fullscreen
            var fullscreen = L.control.fullscreen({
                position: 'topleft',
                title: 'Pantalla completa',
                titleCancel: 'Salir de pantalla completa'
            });

            map.addControl(zoom);
            map.addControl(fullscreen);

            var layer = L.tileLayer(tile_url, {
                attribution: 'OSM',
                noWrap: true,
            });

            map.addLayer(layer);
            map.setView(place, 5);  // Default place and zoom
        };

        var cargaRegistros = function()
        {
            var geojsonFeature = [];
            var allowedPoints = d3.map([]);
            var geoportal_count = 0;

            var species_layer;
            var markersLayer;

            var geojsonMarkerGeoportalOptions = {
                radius: 5,
                fillColor: "#ff0000",
                color: "white",
                weight: 2,
                opacity: 1,
                fillOpacity: 0.6
            };

            var geojsonMarkerGeoportalAveravesOptions = {
                radius: 5,
                fillColor: "#FFA500",
                color: "black",
                weight: 2,
                opacity: 1,
                fillOpacity: 0.6
            };
        };

        var dameUrlCargaGrupos = function(prop)
        {
            switch (prop.tipo_region)
            {
                case 'estado':
                    if (prop.region_id < 10) var region_id = '0' + prop.region_id;
                    else var region_id = prop.region_id;

                    return 'http://www.enciclovida.mx:9002/taxonEdo/conteo/' + region_id + '/edomun/aves?apiKey=enciclovida';
                case 'municipio':
                    return 'http://www.enciclovida.mx:9002/taxonMuni/listado/' + prop.parent_id + '/' + prop.region_id + '/edomun/aves?apiKey=enciclovida';
                default:
                    return undefined;
            }
        };

        var dameUrlTopojson = function(prop)
        {
            switch (prop.tipo_region)
            {
                case 'estado':
                    return '/topojson/' + prop.tipo_region + '_' + prop.region_id + '.json';
                case 'municipio':
                    return '/topojson/' + prop.tipo_region + '_' + prop.region_id + '_' + prop.parent_id + '.json';
                default:
                    return undefined;
            }
        };

        var cargaGrupos = function(properties)
        {
            // Aqui pregunto con el servio de conteo de Abraham, y recibo una respuesta similar, espero
            var grupos = [{"nombre": "Algas", "conteo": 0, "icono": "protoctista-ev-icon"}, {"nombre": "Anfibios", "conteo": 0, "icono": "amphibia-ev-icon"},
                {"nombre": "Hongos", "conteo": 0, "icono": "fungi-ev-icon"},
                {"nombre": "Insectos", "conteo": 0, "icono": "insecta-ev-icon"}, {"nombre": "Mamíferos", "conteo": 0, "icono": "mammalia-ev-icon"},
                {"nombre": "Musgos", "conteo": 0, "icono": "bryophyta-ev-icon"}, {"nombre": "Peces", "conteo": 0, "icono": "actinopterygii-ev-icon"},
                {"nombre": "Plantas", "conteo": 0, "icono": "plantae-ev-icon"}, {"nombre": "Reptiles", "conteo": 0, "icono": "reptilia-ev-icon"}];

            var url = dameUrlCargaGrupos(properties);
            if (url != undefined)
            {
                $.ajax({
                    url: url
                }).done(function(resp) {
                    grupos.push({"nombre": "Aves", "conteo": resp.length, "icono": "aves-ev-icon"});

                    $('#contenedor_grupos').empty();
                    $.each(grupos, function(index, prop){
                        $('#contenedor_grupos').append('<li class="list-group-item"><i class="' + prop.icono + '"></i> <a href="" class="grupo_id" grupo_id="'+prop.nombre+'">' + prop.nombre + '</a><span class="badge">' + prop.conteo + '</span></li>');
                    });
                }).fail(function() {
                    console.log('Falló el servicio de conteo del SNIB');
                });
            }
        };

        var cargaEspecies = function(elemento, pagina, por_pagina)
        {
            // Aqui pregunto por la segunda parte del servicio de Abraham, esperando una respuesta similar
            var especies = {};
            especies["resultados"] = ["1077REPTI", "12780ANFIB", "12109MAMIF", "938REPTI", "19405GIMNO", "923REPTI",
                "1211REPTI", "491REPTI", "11881MAMIF", "963REPTI", "40198ANGIO", "14269AVES", "571REPTI", "13478AVES", "3659LEPID"];

            // Pregunta por los datos correspondientes a estas especies en nuestra base, todos deberian coincidir en teoria ya que son ids de catalogos, a excepcion de los nuevos, ya que aún no se actualiza a la base centralizada
            $.ajax({
                url: '/especies-por-catalogo-id',
                data: {catalogo_id: especies["resultados"]}
            }).done(function(resp) {
                if (resp.estatus)
                {
                    $.each(resp.resultados, function(index, taxon){
                        $('#contenedor_especies').append('<li class="list-group-item" snib_url="' + taxon.snib_mapa_json + '"><a href="" class="especie_id"><img src="' + taxon.foto+'"/>' + taxon.nombre_comun + ' (' + taxon.nombre_cientifico + ')</a></li>');
                    });
                }
                else
                    console.log('Falló la carga de especies de enciclovida');

            }).fail(function() {
                console.log('Falló la carga de especies de enciclovida');
            });
        };

        // Cargo los municipios en la busqueda por lista
        var municipiosPorEstado = function(estado){
            $.ajax({
                url: '/municipios-por-estado',
                data: {region_id: estado.val()}
            }).done(function(res) {
                if (res.estatus)
                {
                    $('#region_municipio').empty().append('<option value>- - - Escoge un municipio - - -</option>');
                    $.each(res.resultados, function(index, municipio){
                        $('#region_municipio').append('<option value="' + municipio.region_id + '">' + municipio.nombre_region + '</option>');
                    });

                    $('#region_municipio').prop('disabled', false).attr('parent_id', res.parent_id);
                }
            }).fail(function() {
                console.log('Falló al cargar los municipios por estado');
            });
        };

        // Carga la division estatal de un inicio
        var cargaDivisionEstatal = function()
        {
            var svg = d3.select(map.getPanes().overlayPane).append('svg').attr('id', 'svg-division-estatal');
            var g = svg.append('g').attr('class', 'leaflet-zoom-hide');

            d3.json('/topojson/estado.json', function (error, collection) {
                var bounds = d3.geo.bounds(topojson.feature(collection, collection.objects['collection']));
                var path = d3.geo.path().projection(projectPoint);

                var feature = g.selectAll('.region')
                        .data(topojson.feature(collection, collection.objects['collection']).features)
                        .enter()
                        .append('path')
                        .attr('class', 'region leaflet-clickable')
                        .on('mouseover', function(d){
                            var name = d.properties.nombre_region;
                            $('#contenedor-nombre-region').html(name);
                        })
                        .on('click', function(d){
                            d.properties.tipo_region = 'estado';
                            cargaGrupos(d.properties);

                            $('#svg-division-municipal').remove();
                            $('#svg-division-estatal .selecciona-region').attr('class', 'region');
                            $(this).attr('class', 'selecciona-region');

                            map.flyTo(d.properties.centroide, 7);
                            cargaDivisionMunicipal(d);
                        });

                map.on('zoomend', reset);
                map.on('zoomstart', function(){
                    $('#svg-division-estatal').css('visibility', 'hidden');
                    $('#svg-division-municipal').css('visibility', 'hidden');
                });
                reset();

                // Reposition the SVG to cover the features.
                function reset()
                {
                    var bottomLeft = projectPoint(bounds[0]);
                    var topRight = projectPoint(bounds[1]);

                    svg.attr('width', topRight[0] - bottomLeft[0])
                            .attr('height', bottomLeft[1] - topRight[1])
                            .style('margin-left', bottomLeft[0] + 'px')
                            .style('margin-top', topRight[1] + 'px');

                    var translation = -bottomLeft[0] + ',' + -topRight[1];
                    g.attr('transform', 'translate(' + -bottomLeft[0] + ',' + -topRight[1] + ')');
                    feature.attr('d', path);

                    $('#svg-division-estatal').css('visibility', 'visible');
                    $('#svg-division-municipal').css('visibility', 'visible');
                }

                // Use Leaflet to implement a D3 geographic projection.
                function projectPoint(x) {
                    var point = map.latLngToLayerPoint(new L.LatLng(x[1], x[0]));
                    return [point.x, point.y];
                }
            });
        };

        // Carga todos los municipios de cierto estado
        var cargaDivisionMunicipal = function(d)
        {
            var svg = d3.select(map.getPanes().overlayPane).append('svg').attr('id', 'svg-division-municipal');
            var g = svg.append('g').attr('class', 'leaflet-zoom-hide');

            d3.json('/topojson/estado_' + d.properties.region_id + '_division_municipal.json', function (error, collection) {
                var bounds = d3.geo.bounds(topojson.feature(collection, collection.objects['collection']));
                var path = d3.geo.path().projection(projectPoint);

                var feature = g.selectAll('.region')
                        .data(topojson.feature(collection, collection.objects['collection']).features)
                        .enter()
                        .append('path')
                        .attr('class', 'region leaflet-clickable')
                        .on('mouseover', function(d){
                            var name = d.properties.nombre_region;
                            $('#contenedor-nombre-region').html(name);
                        })
                        .on('click', function(d){
                            d.properties.tipo_region = 'municipio';
                            cargaGrupos(d.properties);

                            $('#svg-division-estatal .selecciona-region').attr('class', 'region');
                            $('#svg-division-municipal .selecciona-region').attr('class', 'region');
                            $(this).attr('class', 'selecciona-region');

                            map.flyTo(d.properties.centroide, 9);
                        });

                map.on('zoomend', reset);
                map.on('zoomstart', function(){
                    $('#svg-division-estatal').css('visibility', 'hidden');
                    $('#svg-division-municipal').css('visibility', 'hidden');
                });

                // Reposition the SVG to cover the features.
                function reset()
                {
                    var bottomLeft = projectPoint(bounds[0]);
                    var topRight = projectPoint(bounds[1]);

                    svg.attr('width', topRight[0] - bottomLeft[0])
                            .attr('height', bottomLeft[1] - topRight[1])
                            .style('margin-left', bottomLeft[0] + 'px')
                            .style('margin-top', topRight[1] + 'px');

                    var translation = -bottomLeft[0] + ',' + -topRight[1];
                    g.attr('transform', 'translate(' + -bottomLeft[0] + ',' + -topRight[1] + ')');
                    feature.attr('d', path);

                    $('#svg-division-estatal').css('visibility', 'visible');
                    $('#svg-division-municipal').css('visibility', 'visible');
                }

                // Use Leaflet to implement a D3 geographic projection.
                function projectPoint(x) {
                    var point = map.latLngToLayerPoint(new L.LatLng(x[1], x[0]));
                    return [point.x, point.y];
                }
            });
        };

        // Carga una sola region en especifico, estado, municipio, anp o ecoregion
        var cargaRegion = function(prop)
        {
            var svg = d3.select(map.getPanes().overlayPane).append('svg').attr('id', 'svg-region');
            var g = svg.append('g').attr('class', 'leaflet-zoom-hide');

            var url = dameUrlTopojson(prop);
            if (url == undefined) return;

            d3.json(url, function (error, collection) {
                var bounds = d3.geo.bounds(topojson.feature(collection, collection.objects['collection']));
                var path = d3.geo.path().projection(projectPoint);

                var feature = g.selectAll('.region')
                        .data(topojson.feature(collection, collection.objects['collection']).features)
                        .enter()
                        .append('path')
                        .attr('class', 'region leaflet-clickable');

                map.on('zoomend', reset);
                map.on('zoomstart', function(){
                    $('#svg-division-estatal').css('visibility', 'hidden');
                    $('#svg-division-municipal').css('visibility', 'hidden');
                });

                // Reposition the SVG to cover the features.
                function reset()
                {
                    var bottomLeft = projectPoint(bounds[0]);
                    var topRight = projectPoint(bounds[1]);

                    svg.attr('width', topRight[0] - bottomLeft[0])
                            .attr('height', bottomLeft[1] - topRight[1])
                            .style('margin-left', bottomLeft[0] + 'px')
                            .style('margin-top', topRight[1] + 'px');

                    var translation = -bottomLeft[0] + ',' + -topRight[1];
                    g.attr('transform', 'translate(' + -bottomLeft[0] + ',' + -topRight[1] + ')');
                    feature.attr('d', path);

                    $('#svg-division-estatal').css('visibility', 'visible');
                    $('#svg-division-municipal').css('visibility', 'visible');
                }

                // Use Leaflet to implement a D3 geographic projection.
                function projectPoint(x) {
                    var point = map.latLngToLayerPoint(new L.LatLng(x[1], x[0]));
                    return [point.x, point.y];
                }
            });
        };
    </script>

<% end %>

<% content_for(:delayedjs) do %>
    <script>
        map = null;
        especies = null;
        cargaMapa('map');

        $('#contenedor_grupos').on('click', '.grupo_id', function(){
            cargaEspecies($(this));
            return false;
        });

        $('#contenedor_especies').on('click', '.especie_id', function(){
            //cargaRegistros($(this));
            return false;
        });

        $('#regiones').on('change', '#region_estado', function(){
            if ($(this).val() == '')
            {
                $('#region_municipio').empty().append('<option value>- - - - - - - -</option>').prop('disabled', true);
                $('#region_anp').empty().append('<option value>- - - - - - - -</option>').prop('disabled', true);

            } else {
                municipiosPorEstado($(this));
                //regionesAnp($(this));

                cargaRegion({"tipo_region": "estado", "region_id": $(this).val()});
                map.flyTo(d.properties.centroide, 9);
            }
        });

        $('#regiones').on('change', '#region_municipio', function(){
            if ($(this).val() == '')
                topoLayer.clearLayers();

        });

        cargaDivisionEstatal();

    </script>
<% end %>

<% content_for(:extracss) do %>
    <!--link rel="stylesheet" href="http://cdn.leafletjs.com/leaflet/v0.7.7/leaflet.css" /-->
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.2.0/dist/leaflet.css" />
    <link rel="stylesheet" href="http://leaflet.github.io/Leaflet.label/leaflet.label.css" />
    <link rel="stylesheet" href="https://api.tiles.mapbox.com/mapbox.js/plugins/leaflet-draw/v0.2.2/leaflet.draw.css" />
    <%= stylesheet_link_tag 'geodatos/MarkerCluster.Default', 'data-turbolinks-track' => true %>
    <%= stylesheet_link_tag 'geodatos/Control.FullScreen.css', 'data-turbolinks-track' => true %>
    <style>
        #map {
            height: 600px;
            width: 100%;
        }
        #contenedor_especies img {
            height: 150px;
        }
        .region, .selecciona-region {
            fill: #e5e5e5;
            opacity: .5;
            pointer-events: all!important;
        }
        .region {
            stroke: black;
            stroke-width:1px;
        }
        .region:hover {
            fill: steelblue;
        }
        .selecciona-region {
            stroke: green;
            stroke-width:3px;
        }
        #contenedor-nombre-region {
            background-color: grey;
            color: white;
            font-size: 24px;
        }
    </style>
<% end %>

<div id="regiones" class="col-md-4">
  <%= render partial: 'tipos_regiones' %>

  <div id="grupos" >
    <%= render partial: 'grupos' %>
  </div>
</div>

<div id="contenedor_mapa" class="col-md-8">
  <div id="contenedor-nombre-region"> </div>
  <div id="map"></div>
</div>

<div id="especies" class="col-md-12">
  <%= render partial: 'especies' %>
</div>